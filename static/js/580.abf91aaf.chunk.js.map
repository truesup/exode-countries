{"version":3,"file":"static/js/580.abf91aaf.chunk.js","mappings":"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","sources":["graphql/queries.ts","components/CountryCard.tsx","components/CountriesSection.tsx","components/SearchBar.tsx","App.tsx","hooks/useCountrySearch.ts"],"sourcesContent":["import { gql } from '@apollo/client'\n\nexport const GET_COUNTRIES = gql`\n  query {\n    countries {\n      code\n      name\n      phone\n      capital\n      currency\n      languages {\n        native\n      }\n      continent {\n        name\n      }\n      emoji\n    }\n  }\n`\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  Stack,\n  Typography,\n  useTheme,\n} from '@mui/material'\nimport {\n  LocationCity as LocationCityIcon,\n  Flag as FlagIcon,\n  Public as PublicIcon,\n  Phone as PhoneIcon,\n  CurrencyExchange as CurrencyIcon,\n  Translate as TranslateIcon,\n} from '@mui/icons-material'\nimport { useEffect, useState, ReactNode, FC } from 'react'\n\ninterface Props {\n  flag: string\n  name: string\n  continent: string\n  code: string\n  capital: string\n  phone: string\n  currency: string\n  languages: string[]\n}\n\nconst InfoRow: FC<{ icon: ReactNode; text: ReactNode }> = ({ icon, text }) => (\n  <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n    {icon}\n    <Typography variant=\"body1\">{text || 'Not found'}</Typography>\n  </Stack>\n)\n\nconst useIsLargeScreen = (breakpoint: number = 900): boolean => {\n  const [isLarge, setIsLarge] = useState(\n    typeof window !== 'undefined' ? window.innerWidth > breakpoint : true\n  )\n\n  useEffect(() => {\n    const onResize = () => setIsLarge(window.innerWidth > breakpoint)\n    window.addEventListener('resize', onResize)\n    return () => window.removeEventListener('resize', onResize)\n  }, [breakpoint])\n\n  return isLarge\n}\n\nconst truncate = (text: string, max: number): string => {\n  if (text.length <= max) return text\n  const words = text.split(' ')\n  let result = ''\n  for (const word of words) {\n    if ((result + ' ' + word).trim().length > max) break\n    result += (result ? ' ' : '') + word\n  }\n  return result.trim() + '...'\n}\n\nconst formatLanguages = (langs: string[], max = 3): string =>\n  langs.length <= max ? langs.join('/') : `${langs.slice(0, max).join('/')}...`\n\nconst CountryCard: FC<Props> = ({\n  flag,\n  name,\n  continent,\n  code,\n  capital,\n  phone,\n  currency,\n  languages,\n}) => {\n  const theme = useTheme()\n  const isLarge = useIsLargeScreen()\n\n  return (\n    <Card\n      sx={{\n        width: '100%',\n        backgroundColor: 'white',\n        borderRadius: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n      }}>\n      <CardHeader\n        title={\n          <Typography variant=\"h2\" component=\"div\" title={`${flag} ${name}`}>\n            {flag} {isLarge ? truncate(name, 22) : name}\n          </Typography>\n        }\n        sx={{\n          borderBottom: `1px solid ${theme.palette.divider}`,\n          pb: 1,\n          mb: 1,\n        }}\n      />\n\n      <CardContent sx={{ pt: 0 }}>\n        <Stack spacing={1.2}>\n          <InfoRow\n            icon={<PublicIcon sx={{ color: 'gray' }} />}\n            text={continent}\n          />\n          <InfoRow\n            icon={<LocationCityIcon sx={{ color: 'gray' }} />}\n            text={capital}\n          />\n          <InfoRow icon={<FlagIcon sx={{ color: 'gray' }} />} text={code} />\n          <InfoRow\n            icon={<PhoneIcon sx={{ color: 'gray' }} />}\n            text={phone && `+${phone}`}\n          />\n          <InfoRow\n            icon={<CurrencyIcon sx={{ color: 'gray' }} />}\n            text={currency}\n          />\n          <InfoRow\n            icon={<TranslateIcon sx={{ color: 'gray' }} />}\n            text={\n              <span title={languages.join(' / ')}>\n                {formatLanguages(languages)}\n              </span>\n            }\n          />\n        </Stack>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default CountryCard\n","import {\n  Paper,\n  Grid,\n  Button,\n  Typography,\n  CircularProgress,\n} from '@mui/material'\nimport RefreshIcon from '@mui/icons-material/Refresh'\nimport { useQuery } from '@apollo/client'\nimport { GET_COUNTRIES } from '../graphql/queries'\nimport { useEffect, useRef, useState, useMemo, useCallback } from 'react'\nimport CountryCard from './CountryCard'\n\ninterface Props {\n  filter: string\n  mode: 'name' | 'code' | null\n}\n\ninterface Country {\n  emoji: string\n  name: string\n  continent: { name: string }\n  code: string\n  capital: string\n  phone: string\n  currency: string\n  languages: { native: string }[]\n}\n\nconst CountriesSection = ({ filter, mode }: Props) => {\n  const [countriesList, setCountriesList] = useState<Country[]>([])\n  const [visibleCount, setVisibleCount] = useState(9)\n  const [isFetchingMore, setIsFetchingMore] = useState(false)\n  const scrollRef = useRef<HTMLDivElement | null>(null)\n\n  const { data, loading, error, refetch } = useQuery(GET_COUNTRIES)\n\n  useEffect(() => {\n    if (data?.countries) {\n      setCountriesList(data.countries)\n    }\n  }, [data])\n\n  const filteredCountries = useMemo(() => {\n    if (!filter.trim() || !mode) return countriesList\n\n    const search = filter.toLowerCase()\n\n    return countriesList.filter(country =>\n      mode === 'name'\n        ? country.name.toLowerCase().includes(search)\n        : country.code.toLowerCase().includes(search)\n    )\n  }, [countriesList, filter, mode])\n\n  const handleScroll = useCallback(() => {\n    const el = scrollRef.current\n    if (!el || isFetchingMore) return\n\n    const { scrollTop, scrollHeight, clientHeight } = el\n    const isNearBottom = scrollTop + clientHeight >= scrollHeight - 200\n\n    if (isNearBottom && visibleCount < filteredCountries.length) {\n      setIsFetchingMore(true)\n      setTimeout(() => {\n        setVisibleCount(prev => Math.min(prev + 6, filteredCountries.length))\n        setIsFetchingMore(false)\n      }, 250)\n    }\n  }, [isFetchingMore, visibleCount, filteredCountries.length])\n\n  useEffect(() => {\n    const el = scrollRef.current\n    if (!el) return\n\n    el.addEventListener('scroll', handleScroll)\n    return () => el.removeEventListener('scroll', handleScroll)\n  }, [handleScroll])\n\n  return (\n    <Paper\n      component=\"section\"\n      elevation={3}\n      ref={scrollRef}\n      sx={{\n        p: 2,\n        width: '100%',\n        height: '100%',\n        borderRadius: 2,\n        backgroundColor: 'rgba(20, 28, 48, 0.95)',\n        overflowY: 'scroll',\n        position: loading ? 'relative' : 'static',\n      }}>\n      {loading && (\n        <CircularProgress\n          size={32}\n          sx={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            color: 'white',\n          }}\n        />\n      )}\n\n      {!loading && error && (\n        <Grid\n          container\n          direction=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          spacing={2}\n          sx={{ height: '100%' }}>\n          <Grid>\n            <Typography variant=\"h2\" color=\"white\" textAlign=\"center\">\n              Error fetching countries 😓\n            </Typography>\n          </Grid>\n          <Grid>\n            <Button\n              variant=\"outlined\"\n              startIcon={<RefreshIcon />}\n              onClick={() => refetch()}\n              sx={{ color: 'white', borderColor: 'white' }}>\n              Try again\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n\n      {!loading && !error && (\n        <Grid\n          container\n          spacing={2}\n          columns={{ xs: 6, sm: 6, md: 12, lg: 12, xl: 16 }}>\n          {filteredCountries.slice(0, visibleCount).map(country => (\n            <Grid\n              key={country.code}\n              size={{ xs: 6, sm: 6, md: 6, lg: 4, xl: 4 }}>\n              <CountryCard\n                flag={country.emoji}\n                name={country.name}\n                capital={country.capital}\n                code={country.code}\n                continent={country.continent.name}\n                phone={country.phone}\n                currency={country.currency}\n                languages={country.languages.map(lang => lang.native)}\n              />\n            </Grid>\n          ))}\n\n          {isFetchingMore && (\n            <Grid\n              sx={{\n                width: '100%',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}>\n              <CircularProgress size={24} sx={{ color: 'white' }} />\n            </Grid>\n          )}\n        </Grid>\n      )}\n    </Paper>\n  )\n}\n\nexport default CountriesSection\n","import { TextField, IconButton, Paper, Stack, Button } from '@mui/material'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack'\nimport { useRef, useEffect } from 'react'\n\ninterface Props {\n  value: string\n  setValue: (val: string) => void\n  mode: 'name' | 'code' | null\n  setMode: (val: 'name' | 'code' | null) => void\n}\n\nconst SearchBar = ({ value, setValue, mode, setMode }: Props) => {\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    if (mode && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [mode])\n\n  const renderModeButtons = () => (\n    <Stack\n      direction=\"row\"\n      spacing={2}\n      justifyContent=\"center\"\n      sx={{ width: '100%' }}>\n      {['name', 'code'].map(type => (\n        <Button\n          key={type}\n          variant=\"outlined\"\n          onClick={() => setMode(type as 'name' | 'code')}\n          sx={{\n            flex: 1,\n            color: 'white',\n            borderColor: 'white',\n            py: 1,\n          }}>\n          Search by country {type}\n        </Button>\n      ))}\n    </Stack>\n  )\n\n  const renderSearchInput = () => (\n    <>\n      <IconButton onClick={() => setMode(null)} sx={{ color: 'white' }}>\n        <ArrowBackIcon />\n      </IconButton>\n      <TextField\n        inputRef={inputRef}\n        variant=\"standard\"\n        placeholder={`Enter country ${mode}`}\n        autoComplete=\"off\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        InputProps={{\n          disableUnderline: true,\n          sx: { color: 'white' },\n        }}\n        sx={{ ml: 2, flex: 1 }}\n      />\n    </>\n  )\n\n  return (\n    <Paper\n      component=\"div\"\n      elevation={3}\n      sx={{\n        width: '100%',\n        p: 2,\n        display: 'flex',\n        alignItems: 'center',\n        borderRadius: 2,\n        backgroundColor: 'rgba(20, 28, 48, 0.95)',\n      }}>\n      {!mode ? renderModeButtons() : renderSearchInput()}\n    </Paper>\n  )\n}\n\nexport default SearchBar\n","import Typography from '@mui/material/Typography'\nimport { useCountrySearch } from './hooks/useCountrySearch'\nimport CountriesSection from './components/CountriesSection'\nimport SearchBar from './components/SearchBar'\n\nfunction App() {\n  const { searchValue, setSearchValue, filterMode, setFilterMode } =\n    useCountrySearch()\n\n  return (\n    <div className=\"background-overlay\">\n      <Typography component=\"h1\" variant=\"h1\" sx={{ display: 'none' }}>\n        Countries Explorer — a simple way to search, filter and learn about\n        countries, their capitals, currencies and more.\n      </Typography>\n      <SearchBar\n        value={searchValue}\n        setValue={setSearchValue}\n        mode={filterMode}\n        setMode={setFilterMode}\n      />\n      <CountriesSection filter={searchValue} mode={filterMode} />\n    </div>\n  )\n}\n\nexport default App\n","import { useState } from 'react'\n\nexport const useCountrySearch = () => {\n  const [searchValue, setSearchValue] = useState('')\n  const [filterMode, setFilterMode] = useState<'name' | 'code' | null>(null)\n\n  return {\n    searchValue,\n    setSearchValue,\n    filterMode,\n    setFilterMode,\n  }\n}\n"],"names":["GET_COUNTRIES","gql","_templateObject","_taggedTemplateLiteral","InfoRow","_ref","icon","text","_jsxs","Stack","direction","spacing","alignItems","children","_jsx","Typography","variant","truncate","max","length","words","split","result","word","trim","formatLanguages","langs","arguments","undefined","join","concat","slice","_ref2","flag","name","continent","code","capital","phone","currency","languages","theme","useTheme","isLarge","breakpoint","setIsLarge","useState","window","innerWidth","useEffect","onResize","addEventListener","removeEventListener","useIsLargeScreen","Card","sx","width","backgroundColor","borderRadius","display","flexDirection","justifyContent","CardHeader","title","component","borderBottom","palette","divider","pb","mb","CardContent","pt","PublicIcon","color","LocationCityIcon","FlagIcon","PhoneIcon","CurrencyIcon","TranslateIcon","filter","mode","countriesList","setCountriesList","visibleCount","setVisibleCount","isFetchingMore","setIsFetchingMore","scrollRef","useRef","data","loading","error","refetch","useQuery","countries","filteredCountries","useMemo","search","toLowerCase","country","includes","handleScroll","useCallback","el","current","scrollTop","scrollHeight","clientHeight","setTimeout","prev","Math","min","Paper","elevation","ref","p","height","overflowY","position","CircularProgress","size","top","left","transform","Grid","container","textAlign","Button","startIcon","RefreshIcon","onClick","borderColor","columns","xs","sm","md","lg","xl","map","CountryCard","emoji","lang","native","value","setValue","setMode","inputRef","focus","_Fragment","IconButton","ArrowBackIcon","TextField","placeholder","autoComplete","onChange","e","target","InputProps","disableUnderline","ml","flex","type","py","searchValue","setSearchValue","filterMode","setFilterMode","useCountrySearch","className","SearchBar","CountriesSection"],"sourceRoot":""}
{"version":3,"file":"static/js/624.47f364c2.chunk.js","mappings":"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","sources":["graphql/queries.ts","components/CountryCard.tsx","components/CountriesSection.tsx","components/SearchBar.tsx","App.tsx"],"sourcesContent":["import { gql } from '@apollo/client'\n\nexport const COUNTRY_FIELDS = gql`\n  fragment CountryFields on Country {\n    code\n    name\n    phone\n    capital\n    currency\n    languages {\n      native\n    }\n    continent {\n      name\n    }\n    emoji\n  }\n`\n\nexport const GET_COUNTRIES = gql`\n  query GetCountries {\n    countries {\n      ...CountryFields\n    }\n  }\n  ${COUNTRY_FIELDS}\n`\n\nexport const GET_COUNTRIES_BY_NAME = gql`\n  query GetCountriesByName($name: StringQueryOperatorInput) {\n    countries(filter: { name: $name }) {\n      ...CountryFields\n    }\n  }\n  ${COUNTRY_FIELDS}\n`\n\nexport const GET_COUNTRIES_BY_CODE = gql`\n  query GetCountriesByCode($code: StringQueryOperatorInput) {\n    countries(filter: { code: $code }) {\n      ...CountryFields\n    }\n  }\n  ${COUNTRY_FIELDS}\n`\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  Stack,\n  Typography,\n  useTheme,\n} from '@mui/material'\nimport {\n  LocationCity as LocationCityIcon,\n  Flag as FlagIcon,\n  Public as PublicIcon,\n  Phone as PhoneIcon,\n  CurrencyExchange as CurrencyIcon,\n  Translate as TranslateIcon,\n} from '@mui/icons-material'\nimport { useEffect, useState, ReactNode } from 'react'\n\ninterface Props {\n  flag: string\n  name: string\n  continent: string\n  code: string\n  capital: string\n  phone: string\n  currency: string\n  languages: string[]\n}\n\nconst InfoRow = ({ icon, text }: { icon: ReactNode; text: ReactNode }) => (\n  <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n    {icon}\n    <Typography variant=\"body1\">{text || 'Not found'}</Typography>\n  </Stack>\n)\n\nconst useIsLargeScreen = (breakpoint: number = 900): boolean => {\n  const [isLarge, setIsLarge] = useState(\n    typeof window !== 'undefined' ? window.innerWidth > breakpoint : true\n  )\n\n  useEffect(() => {\n    const onResize = () => setIsLarge(window.innerWidth > breakpoint)\n    window.addEventListener('resize', onResize)\n    return () => window.removeEventListener('resize', onResize)\n  }, [breakpoint])\n\n  return isLarge\n}\n\nconst truncate = (text: string, max: number): string => {\n  if (text.length <= max) return text\n  const words = text.split(' ')\n  let result = ''\n  for (const word of words) {\n    if ((result + ' ' + word).trim().length > max) break\n    result += (result ? ' ' : '') + word\n  }\n  return result.trim() + '...'\n}\n\nconst formatLanguages = (langs: string[], max = 3): string =>\n  langs.length <= max ? langs.join('/') : `${langs.slice(0, max).join('/')}...`\n\nconst CountryCard = ({\n  flag,\n  name,\n  continent,\n  code,\n  capital,\n  phone,\n  currency,\n  languages,\n}: Props) => {\n  const theme = useTheme()\n  const isLarge = useIsLargeScreen()\n\n  return (\n    <Card\n      sx={{\n        width: '100%',\n        backgroundColor: 'white',\n        borderRadius: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n      }}>\n      <CardHeader\n        title={\n          <Typography variant=\"h2\" component=\"div\" title={`${flag} ${name}`}>\n            {flag} {isLarge ? truncate(name, 22) : name}\n          </Typography>\n        }\n        sx={{\n          borderBottom: `1px solid ${theme.palette.divider}`,\n          pb: 1,\n          mb: 1,\n        }}\n      />\n\n      <CardContent sx={{ pt: 0 }}>\n        <Stack spacing={1.2}>\n          <InfoRow\n            icon={<PublicIcon sx={{ color: 'gray' }} />}\n            text={continent}\n          />\n          <InfoRow\n            icon={<LocationCityIcon sx={{ color: 'gray' }} />}\n            text={capital}\n          />\n          <InfoRow icon={<FlagIcon sx={{ color: 'gray' }} />} text={code} />\n          <InfoRow\n            icon={<PhoneIcon sx={{ color: 'gray' }} />}\n            text={phone && `+${phone}`}\n          />\n          <InfoRow\n            icon={<CurrencyIcon sx={{ color: 'gray' }} />}\n            text={currency}\n          />\n          <InfoRow\n            icon={<TranslateIcon sx={{ color: 'gray' }} />}\n            text={\n              <span title={languages.join(' / ')}>\n                {formatLanguages(languages)}\n              </span>\n            }\n          />\n        </Stack>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default CountryCard\n","import {\n  Paper,\n  Grid,\n  Button,\n  Typography,\n  CircularProgress,\n} from '@mui/material'\nimport RefreshIcon from '@mui/icons-material/Refresh'\nimport { useQuery } from '@apollo/client'\nimport { useEffect, useRef, useState, useMemo, useCallback } from 'react'\nimport { GET_COUNTRIES } from '../graphql/queries'\nimport CountryCard from './CountryCard'\nimport type { SearchMode } from '../types/search'\n\ninterface CountriesSectionProps {\n  searchMode: SearchMode\n  searchData: any\n  searchLoading: boolean\n  searchError: any\n  hasSearchBeenSubmitted: boolean\n}\n\ninterface Country {\n  emoji: string\n  name: string\n  continent: { name: string }\n  code: string\n  capital: string\n  phone: string\n  currency: string\n  languages: { native: string }[]\n}\n\nconst CountriesSection = ({\n  searchMode,\n  searchData,\n  searchLoading,\n  searchError,\n  hasSearchBeenSubmitted,\n}: CountriesSectionProps) => {\n  const [visibleCount, setVisibleCount] = useState(9)\n  const [isFetchingMore, setIsFetchingMore] = useState(false)\n  const scrollRef = useRef<HTMLDivElement | null>(null)\n\n  const {\n    data: allCountriesData,\n    loading: allCountriesLoading,\n    error: allCountriesError,\n    refetch,\n  } = useQuery(GET_COUNTRIES)\n\n  const countriesList: Country[] = useMemo(() => {\n    return searchMode && hasSearchBeenSubmitted\n      ? searchData?.countries ?? []\n      : allCountriesData?.countries ?? []\n  }, [searchMode, hasSearchBeenSubmitted, searchData, allCountriesData])\n\n  // для скролла и лоадера снизу (фейк загрузка)\n  // коллбэк потому что функция передается в зависимости useEffect ниже\n  const handleScroll = useCallback(() => {\n    const el = scrollRef.current\n    if (!el || isFetchingMore) return\n\n    const { scrollTop, scrollHeight, clientHeight } = el\n    const isNearBottom = scrollTop + clientHeight >= scrollHeight - 200\n\n    if (isNearBottom && visibleCount < countriesList.length) {\n      setIsFetchingMore(true)\n      setTimeout(() => {\n        setVisibleCount(prev => Math.min(prev + 6, countriesList.length))\n        setIsFetchingMore(false)\n      }, 250)\n    }\n  }, [isFetchingMore, visibleCount, countriesList.length])\n\n  useEffect(() => {\n    const el = scrollRef.current\n    if (!el) return\n    el.addEventListener('scroll', handleScroll)\n    return () => el.removeEventListener('scroll', handleScroll)\n  }, [handleScroll])\n\n  const showLoading = searchLoading || allCountriesLoading\n  const showError = searchError || allCountriesError\n\n  const renderLoader = () => (\n    <Grid\n      container\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      sx={{ height: '100%' }}>\n      <CircularProgress size={32} sx={{ color: 'white' }} />\n    </Grid>\n  )\n\n  const renderError = () => (\n    <Grid\n      container\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      spacing={2}\n      sx={{ height: '100%' }}>\n      <Grid>\n        <Typography variant=\"h2\" color=\"white\" textAlign=\"center\">\n          Error fetching countries 😓\n        </Typography>\n      </Grid>\n      <Grid>\n        <Button\n          variant=\"outlined\"\n          startIcon={<RefreshIcon />}\n          onClick={() => refetch()}\n          sx={{ color: 'white', borderColor: 'white' }}>\n          Try again\n        </Button>\n      </Grid>\n    </Grid>\n  )\n\n  const renderEmptySearchResult = () => (\n    <Grid\n      container\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      spacing={2}\n      sx={{ height: '100%' }}>\n      <Grid>\n        <Typography variant=\"h2\" color=\"white\" textAlign=\"center\">\n          No matches found for your search 😓\n        </Typography>\n      </Grid>\n    </Grid>\n  )\n\n  const renderCountries = () => (\n    <Grid\n      container\n      spacing={2}\n      columns={{ xs: 6, sm: 6, md: 12, lg: 12, xl: 16 }}>\n      {countriesList.slice(0, visibleCount).map(country => (\n        <Grid key={country.code} size={{ xs: 6, sm: 6, md: 6, lg: 4, xl: 4 }}>\n          <CountryCard\n            flag={country.emoji}\n            name={country.name}\n            capital={country.capital}\n            code={country.code}\n            continent={country.continent.name}\n            phone={country.phone}\n            currency={country.currency}\n            languages={country.languages.map(lang => lang.native)}\n          />\n        </Grid>\n      ))}\n\n      {isFetchingMore && (\n        <Grid\n          sx={{\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}>\n          <CircularProgress size={24} sx={{ color: 'white' }} />\n        </Grid>\n      )}\n    </Grid>\n  )\n\n  return (\n    <Paper\n      component=\"section\"\n      elevation={3}\n      ref={scrollRef}\n      sx={{\n        p: 2,\n        width: '100%',\n        height: '100%',\n        borderRadius: 2,\n        backgroundColor: 'rgba(20, 28, 48, 0.95)',\n        overflowY: 'scroll',\n        // для лоадера\n        position: showLoading ? 'relative' : 'static',\n      }}>\n      {showLoading\n        ? renderLoader()\n        : showError\n        ? renderError()\n        : searchMode && hasSearchBeenSubmitted && countriesList.length === 0\n        ? renderEmptySearchResult()\n        : renderCountries()}\n    </Paper>\n  )\n}\n\nexport default CountriesSection\n","import {\n  TextField,\n  IconButton,\n  Paper,\n  Stack,\n  Button,\n  CircularProgress,\n} from '@mui/material'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack'\nimport SearchIcon from '@mui/icons-material/Search'\nimport { useRef, useEffect, useState, FormEvent } from 'react'\nimport type { SearchMode } from '../types/search'\n\ninterface SearchBarProps {\n  searchMode: SearchMode\n  setSearchMode: (mode: SearchMode) => void\n  onSearch: (options: { variables: any }) => void\n  searchLoading: boolean\n  setHasSearchBeenSubmitted: (submitted: boolean) => void\n}\n\nconst SearchBar = ({\n  searchMode,\n  setSearchMode,\n  onSearch,\n  searchLoading,\n  setHasSearchBeenSubmitted,\n}: SearchBarProps) => {\n  const [searchValue, setSearchValue] = useState('')\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  // автофокус на инпут при выборе режима\n  useEffect(() => {\n    if (searchMode && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [searchMode])\n\n  // выход из поиска по mode\n  const handleExitSearch = () => {\n    setSearchValue('')\n    setSearchMode(null)\n    setHasSearchBeenSubmitted(false)\n  }\n\n  // для адекватного поиска по названию страны\n  const normalizeToTitleCase = (input: string): string =>\n    input\n      .trim()\n      .split(/\\s+/)\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ')\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    const trimmed = searchValue.trim()\n    if (!trimmed || !searchMode) return\n\n    // чтобы не отображать старый результат поиска при ->\n    // закрытии и переводе mode в null\n    setHasSearchBeenSubmitted(true)\n\n    const variable =\n      searchMode === 'name'\n        ? { name: { regex: `.*${normalizeToTitleCase(trimmed)}.*` } }\n        : { code: { regex: `^${trimmed.toUpperCase()}$` } }\n\n    onSearch({ variables: variable })\n  }\n\n  const renderModeButtons = () => (\n    <Stack\n      direction=\"row\"\n      spacing={2}\n      justifyContent=\"center\"\n      sx={{ width: '100%' }}>\n      {/* as const чтобы ts не ругался и знал точные значения */}\n      {(['name', 'code'] as const).map(type => (\n        <Button\n          key={type}\n          variant=\"outlined\"\n          onClick={() => setSearchMode(type)}\n          sx={{\n            flex: 1,\n            color: 'white',\n            borderColor: 'white',\n            py: 1,\n          }}>\n          Search by country {type}\n        </Button>\n      ))}\n    </Stack>\n  )\n\n  const renderSearchForm = () => (\n    <Paper\n      component=\"form\"\n      onSubmit={handleSubmit}\n      elevation={0}\n      sx={{\n        width: '100%',\n        background: 'transparent',\n        display: 'flex',\n        alignItems: 'center',\n      }}>\n      <IconButton onClick={handleExitSearch} sx={{ color: 'white' }}>\n        <ArrowBackIcon />\n      </IconButton>\n\n      <TextField\n        inputRef={inputRef}\n        variant=\"standard\"\n        placeholder={`Enter country ${searchMode} and press Enter`}\n        autoComplete=\"off\"\n        value={searchValue}\n        onChange={e => setSearchValue(e.target.value)}\n        fullWidth\n        InputProps={{\n          disableUnderline: true,\n          sx: { color: 'white' },\n        }}\n        sx={{ mx: 2, flex: 1 }}\n      />\n\n      <IconButton\n        type=\"submit\"\n        sx={{ color: 'white' }}\n        disabled={searchLoading}>\n        {searchLoading ? (\n          <CircularProgress size={24} sx={{ color: 'white' }} />\n        ) : (\n          <SearchIcon />\n        )}\n      </IconButton>\n    </Paper>\n  )\n\n  return (\n    <Paper\n      component=\"div\"\n      elevation={3}\n      sx={{\n        width: '100%',\n        p: 2,\n        display: 'flex',\n        alignItems: 'center',\n        borderRadius: 2,\n        backgroundColor: 'rgba(20, 28, 48, 0.95)',\n      }}>\n      {!searchMode ? renderModeButtons() : renderSearchForm()}\n    </Paper>\n  )\n}\n\nexport default SearchBar\n","import Typography from '@mui/material/Typography'\nimport CountriesSection from './components/CountriesSection'\nimport SearchBar from './components/SearchBar'\nimport { useLazyQuery } from '@apollo/client'\nimport { useMemo, useState } from 'react'\nimport { GET_COUNTRIES_BY_CODE, GET_COUNTRIES_BY_NAME } from './graphql/queries'\nimport type { SearchMode } from './types/search'\n\nfunction App() {\n  const [searchMode, setSearchMode] = useState<SearchMode>(null)\n  const [hasSearchBeenSubmitted, setHasSearchBeenSubmitted] = useState(false)\n\n  // useLazyQuery для запроса по требованию, а не при монтировании\n  const [getCountriesByName, queryByName] = useLazyQuery(GET_COUNTRIES_BY_NAME)\n  const [getCountriesByCode, queryByCode] = useLazyQuery(GET_COUNTRIES_BY_CODE)\n\n  // триггер - для запуска, резулт - содержит дату, лоадинг, еррор\n  const queries = {\n    name: { trigger: getCountriesByName, result: queryByName },\n    code: { trigger: getCountriesByCode, result: queryByCode },\n  }\n\n  const currentQuery = useMemo(() => {\n    return searchMode ? queries[searchMode] : null\n  }, [searchMode, queries])\n\n  return (\n    <div className=\"background-overlay\">\n      <Typography component=\"h1\" variant=\"h1\" sx={{ display: 'none' }}>\n        Countries Explorer — a simple way to search, filter and learn about\n        countries, their capitals, currencies and more.\n      </Typography>\n\n      <SearchBar\n        searchMode={searchMode}\n        setSearchMode={setSearchMode}\n        onSearch={currentQuery?.trigger ?? (() => {})} // заглушка чтобы не вылетала ошибка\n        searchLoading={currentQuery?.result.loading ?? false}\n        setHasSearchBeenSubmitted={setHasSearchBeenSubmitted}\n      />\n\n      <CountriesSection\n        searchMode={searchMode}\n        hasSearchBeenSubmitted={hasSearchBeenSubmitted}\n        searchData={currentQuery?.result.data ?? null}\n        searchLoading={currentQuery?.result.loading ?? false}\n        searchError={currentQuery?.result.error ?? null}\n      />\n    </div>\n  )\n}\n\nexport default App\n"],"names":["COUNTRY_FIELDS","gql","_templateObject","_taggedTemplateLiteral","GET_COUNTRIES","_templateObject2","GET_COUNTRIES_BY_NAME","_templateObject3","GET_COUNTRIES_BY_CODE","_templateObject4","InfoRow","_ref","icon","text","_jsxs","Stack","direction","spacing","alignItems","children","_jsx","Typography","variant","truncate","max","length","words","split","result","word","trim","formatLanguages","langs","arguments","undefined","join","concat","slice","_ref2","flag","name","continent","code","capital","phone","currency","languages","theme","useTheme","isLarge","breakpoint","setIsLarge","useState","window","innerWidth","useEffect","onResize","addEventListener","removeEventListener","useIsLargeScreen","Card","sx","width","backgroundColor","borderRadius","display","flexDirection","justifyContent","CardHeader","title","component","borderBottom","palette","divider","pb","mb","CardContent","pt","PublicIcon","color","LocationCityIcon","FlagIcon","PhoneIcon","CurrencyIcon","TranslateIcon","searchMode","searchData","searchLoading","searchError","hasSearchBeenSubmitted","visibleCount","setVisibleCount","isFetchingMore","setIsFetchingMore","scrollRef","useRef","data","allCountriesData","loading","allCountriesLoading","error","allCountriesError","refetch","useQuery","countriesList","useMemo","_searchData$countries","_allCountriesData$cou","countries","handleScroll","useCallback","el","current","scrollTop","scrollHeight","clientHeight","setTimeout","prev","Math","min","showLoading","showError","Paper","elevation","ref","p","height","overflowY","position","Grid","container","CircularProgress","size","textAlign","Button","startIcon","RefreshIcon","onClick","borderColor","columns","xs","sm","md","lg","xl","map","country","CountryCard","emoji","lang","native","setSearchMode","onSearch","setHasSearchBeenSubmitted","searchValue","setSearchValue","inputRef","focus","handleExitSearch","handleSubmit","e","preventDefault","trimmed","variable","regex","input","charAt","toUpperCase","toLowerCase","variables","onSubmit","background","IconButton","ArrowBackIcon","TextField","placeholder","autoComplete","value","onChange","target","fullWidth","InputProps","disableUnderline","mx","flex","type","disabled","SearchIcon","py","_currentQuery$trigger","_currentQuery$result$","_currentQuery$result$2","_currentQuery$result$3","_currentQuery$result$4","getCountriesByName","queryByName","useLazyQuery","getCountriesByCode","queryByCode","queries","trigger","currentQuery","className","SearchBar","CountriesSection"],"sourceRoot":""}